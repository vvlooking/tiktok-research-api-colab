import requests
import json
import pandas as pd
from google.colab import files

# UPLOAD FILE
uploaded = files.upload()

# GET PARAMETERS
USER_LIST_F = list(uploaded.keys())[0]
OUTPUT_F = "usernames.json"

# READ IN LIST OF USERS
with open(USER_LIST_F) as f:
    USER_LIST = [user.strip() for user in f]

# GET ACCESS TOKEN, DETERMINE FIELDS
def get_access_token():
    CLIENT_KEY = "YOUR_CLIENT_KEY"  # substitute with your client key
    CLIENT_SECRET = "YOUR_CLIENT_SECRET"  # substitute with your secret key
    r = requests.post('https://open.tiktokapis.com/v2/oauth/token/',
                      headers={'Content-Type': 'application/x-www-form-urlencoded',
                               'Cache-Control': 'no-cache'
                              },
                      data={'client_key': CLIENT_KEY,
                            'client_secret': CLIENT_SECRET,
                            'grant_type': 'client_credentials'})
    ACCESS_TOKEN = r.json()['access_token']
    return ACCESS_TOKEN

ACCESS_TOKEN = get_access_token()

ALL_FIELDS = 'display_name,bio_description,avatar_url,is_verified,follower_count,\
following_count,likes_count,video_count'

# COLLECT DATA

DATA_LIST = []

for i, USER in enumerate(USER_LIST):
    if i == 1000:  # rate limit
        print("rate limit is up! left off searching for:", USER)
        break

    try:
        D = requests.post('https://open.tiktokapis.com/v2/research/user/info/?fields=%s' % ALL_FIELDS,
                          headers={'authorization': 'bearer ' + ACCESS_TOKEN},
                          data={'username': USER})
        DATA_LIST.append(D.json())

    except Exception as e:
        print("search for", USER, "didn't work! ...moving on!", str(e))
        continue

# WRITE DATA TO FILE
with open(OUTPUT_F, 'w') as f:
    json.dump(DATA_LIST, f, indent=2)

# CLEAN THE JSON DATA BEFORE CONVERTING TO CSV
with open(OUTPUT_F, 'r') as f:
    data_list = json.load(f)

# Convert the data to a DataFrame
df = pd.json_normalize(data_list)
print(df.columns)

df_cleaned = df[['data.likes_count', 'data.video_count', 'data.avatar_url', 'data.bio_description',
                 'data.display_name', 'data.follower_count', 'data.following_count', 'data.is_verified']].copy()

df_cleaned['data.is_verified'] = df_cleaned['data.is_verified'].astype(bool)

# SAVE FILE AS CSV
cleaned_csv_path = OUTPUT_F.replace('.json', '_cleaned.csv')

# Save the cleaned DataFrame to CSV
df_cleaned.to_csv(cleaned_csv_path, index=False)

# DOWNLOAD THE FILE
files.download(cleaned_csv_path)
